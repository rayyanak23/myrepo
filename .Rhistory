b <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- n*p
p <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(ratio) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u<=ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.5)
binom_arp <- function(n,p)
{
x <- 0:n
b <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- n*p
p <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u<=ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.5)
binom_arp <- function(n,p)
{
x <- 0:n
b <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- n*p
p <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u<= ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.5)
check <- replicate(1000,binom_arp(n = 10, p = 0.25))
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,4)
choose(3,5)
choose(3,8)
n=10
p=0.25
x <- 0:n
b <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- n*p
p <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u <= ratio)
{
return(c(y,i,c))
}
}
y
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio
u <- runif(1)
y <- rpois(1,lambda)
binom_arp <- function(n,p)
{
x <- 0:n
#binomial <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- n*p
#poisson <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u <= ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.5)
check <- replicate(1000,binom_arp(n = 10, p = 0.25))
rowMeans(check)
binom_arp(10,0.25)
check <- replicate(1000,binom_arp(n = 10, p = 0.25))
rowMeans(check)
check <- replicate(100000,binom_arp(n = 10, p = 0.25))
rowMeans(check)
check <- replicate(100000,binom_arp(n = 10, p = 0.25))
rowMeans(check)
binom_arg(10,0.25)
binom_arp <- function(n,p)
{
x <- 0:n
#binomial <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- n*p
#poisson <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u <= ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.25)
check <- replicate(10000,binom_arp(n = 10, p = 0.25))
dim(check)
check <- replicate(2,binom_arp(n = 10, p = 0.25))
check
check <- replicate(1000,binom_arp(n = 10, p = 0.25))
rowMeans(check)
check <- replicate(10000,binom_arp(n = 10, p = 0.25))
rowMeans(check)
binom_arg <- function(n,p)
{
x <- 0:n
b <- choose(n,x)*(p^x)*((1-p)^(n-x))
p2 <- 1/((n*p)+1)
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(((1-p2)^x)*(p2))
c <- max(all_c) + 0.001
g <- p2*(1-p2)^x
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
#print(u)
y <- rgeom(1,p2)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/((1-p2)^y*(p2))
ratio <- ratio/c
if(u<=ratio)
{
return(c(y,i,c))
}
}
}
binom_arg(10,0.25)
check <- replicate(1000,binom_arg(n = 20, p = 0.25))
rowMeans(check)
check <- replicate(1000,binom_arg(n = 10, p = 0.25))
rowMeans(check)
check <- replicate(100000,binom_arg(n = 10, p = 0.25))
rowMeans(check)
draw_trnpois <- function(m, lambda)
{
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda)*(lambda)^x/(factorial(x))
c <- 1/sum(pmf)
while(accept == 0)
{
try <- try + 1
U <- runif(1)
Y <- rpois(1, lambda)
if(Y > m)
{
accept <- 0
}
else if(U < 1/c*sum(pmf))
{
accept <- 1
rtn <- Y
}
}
return(c(rtn,Â try))
draw_trnpois <- function(m, lambda)
{
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda)*(lambda)^x/(factorial(x))
c <- 1/sum(pmf)
while(accept == 0)
{
try <- try + 1
U <- runif(1)
Y <- rpois(1, lambda)
if(Y > m)
{
accept <- 0
}
else if(U < 1/c*sum(pmf))
{
accept <- 1
rtn <- Y
}
}
return(c(rtn,try))
}
draw_trnpois <- function(m, lambda)
{
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda)*(lambda)^x/(factorial(x))
c <- 1/sum(pmf)
while(accept == 0)
{
try <- try + 1
U <- runif(1)
Y <- rpois(1, lambda)
if(Y > m)
{
accept <- 0
}
else if(U < 1/c*sum(pmf))
{
accept <- 1
rtn <- Y
}
}
return(c(rtn,try))
}
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois <- function(m, lambda)
{
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda)*(lambda)^x/(factorial(x))
c <- 1/sum(pmf)
while(accept == 0)
{
try <- try + 1
U <- runif(1)
Y <- rpois(1, lambda)
if(Y > m)
{
accept <- 0
}
else if(U < 1/c*sum(pmf))
{
accept <- 1
rtn <- Y
}
}
return(c(rtn,try,c))
}
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois(15,17)
draw_trnpois(15,17)
check <- replicate(1000,draw_trnpois(15,17))
rowMeans(check)
check <- replicate(10000,draw_trnpois(15,17))
rowMeans(check)
draw_trnpois2 <- function(m, lambda)
{
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
c <- 1/sum(pmf)
while(accept == 0)
{
try <- try + 1
U <- runif(1)
Y <- rpois(1, lambda)
if(U < 1/c*sum(pmf))
{
accept <- 1
rtn <- Y
}
}
return(c(rtn,try,c))
}
draw_trnpois2(15,17)
check <- replicate(10000,draw_trnpois2(15,17))
rowMeans(check)
binom_arp <- function(n,p)
{
x <- 0:n
#binomial <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- 10
#poisson <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u <= ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.5)
check <- replicate(10000,binom_arp(n = 10, p = 0.5))
rowMeans(check)
binom_arp <- function(n,p)
{
x <- 0:n
#binomial <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- 15
#poisson <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u <= ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.5)
check <- replicate(1000,binom_arp(n = 10, p = 0.5))
rowMeans(check)
binom_arp <- function(n,p)
{
x <- 0:n
#binomial <- choose(n,x)*(p^x)*((1-p)^(n-x))
lambda <- n*p
#poisson <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
all_c <- (choose(n,x)*(p^x)*((1-p)^(n-x)))/(exp(-lambda+(x*log(lambda))-log(factorial(x))))
c <- max(all_c) + 0.0001
i <- 0
while(TRUE){
i <- i + 1
u <- runif(1)
y <- rpois(1,lambda)
ratio <- (choose(n,y)*(p^y)*((1-p)^(n-y)))/(exp(-lambda+(y*log(lambda))-log(factorial(y))))
ratio <- ratio/c
if(u <= ratio)
{
return(c(y,i,c))
}
}
}
binom_arp(10,0.5)
check <- replicate(1000,binom_arp(n = 10, p = 0.5))
rowMeans(check)
check <- replicate(1000,binom_arp(n = 10, p = 0.9))
rowMeans(check)
check <- replicate(1000,binom_arp(n = 10, p = 0.99))
rowMeans(check)
check <- replicate(1000,binom_arp(n = 100, p = 0.99))
rowMeans(check)
check <- replicate(1000,binom_arp(n = 100, p = 0.5))
rowMeans(check)
check <- replicate(1000,binom_arp(n = 95, p = 0.71))
rowMeans(check)
check <- replicate(100000,binom_arp(n = 95, p = 0.71))
rowMeans(check)
m=30
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
c <- 1/sum(pmf)
c
m=30
lambda <- 20
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
c <- 1/sum(pmf)
c
1/c*sum(pmf)
c <- 1/sum(pmf) + 0.01
c
while(TRUE)
{
try <- try + 1
U <- runif(1)
Y <- rpois(1, lambda)
if(Y > m)
{
accept <- 0
}
else if(U < 1/c*sum(pmf))
{
accept <- 1
rtn <- Y
}
}
draw_trnpois <- function(m, lambda)
{
accept <- 0
try <- 0
x <- 0:m
pmf <- exp(-lambda+(x*log(lambda))-log(factorial(x)))
c <- 1/sum(pmf) + 0.01
while(accept==0)
{
try <- try + 1
U <- runif(1)
Y <- rpois(1, lambda)
if(Y > m)
{
accept <- 0
}
else
{
accept <- 1
rtn <- Y
}
}
return(c(rtn,try,c))
}
draw_trnpois(30,20)
check <- replicate(10000,draw_trnpois(30,20))
rowMeans(check)
check <- replicate(10000,draw_trnpois(15,17))
rowMeans(check)
check <- replicate(10000,draw_trnpois(10,17))
rowMeans(check)
check <- replicate(10000,draw_trnpois(18,17))
rowMeans(check)
check <- replicate(10000,draw_trnpois(50,3))
rowMeans(check)
check <- replicate(10000,draw_trnpois(50,300))
check <- replicate(10000,draw_trnpois(10,25))
draw_trnpois(10,25)
draw_trnpois(10,25)
draw_trnpois(10,25)
check <- replicate(1000,draw_trnpois(10,25))
rowMeans(check)
which get
R.version.string
#> [1] "R version 4.3.2 (2023-10-31)"
update.packages(ask = FALSE, checkBuilt = TRUE)
usethis::create_github_token()
install.packages("usethis")
library(usethis)
## install if needed (do this exactly once):
## install.packages("usethis")
library(usethis)
use_git_config(user.name = "rayyanak23", user.email = "rayyanstat09@gmail.com")
usethis::git_default_branch_configure()
usethis::create_github_token()
gitcreds::gitcreds_set()
pwd
gwd
wd
getwd
setwd("~/GitHub")
setwd("~/GitHub/myrepo")
